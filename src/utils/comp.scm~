(define prefix ";;CF")
(define object-extension ".o1")

(define (header? f)
  (and (eq? (file-type f) 'regular)
       (>= (string-length f) 5)
       (string=? (substring f (- (string-length f) 5) (string-length f))
                 "#.scm")))

(define (scheme? f)
  (and (eq? (file-type f) 'regular)
       (>= (string-length f) 4)
       (string=? (substring f (- (string-length f) 4) (string-length f))
                 ".scm")))

(define (directory? f)
  (eq? (file-type f) 'directory))

(define (filter t? l)
  (let filter ((l l) (r '()))
    (cond
     ((null? l) (reverse r))
     ((t? (car l)) (filter (cdr l) (cons (car l) r)))
     (else (filter (cdr l) r)))))

(define (notf fn)
  (lambda (e) (not (fn e))))
   
(define (compile-file* f)
  (call-with-input-file f
    (lambda (p)
      (let*(
            (first-line (read-line p))
            (info
             (if (string=? (substring first-line 0 (string-length prefix)) prefix)
                 (call-with-input-string (substring first-line (string-length prefix) (string-length first-line)) read-all)
                 '())))
        (cond
         ((memq not-compile: info) 'ok)
         (else
          (apply compile-file (cons f info))))))))      

(define (compile-files-in-dir d)
  (for-each
   compile-file*
   (filter
    (notf header?)
    (filter scheme? (map (lambda (f) (string-append d "/" f)) (directory-files d))))))


(define (compile-all d #!key (recursive? #t))
  (compile-files-in-dir d)
  (if recursive?
      (for-each compile-all
                (filter directory? 
                        (map (lambda (f) (string-append d "/" f)) (directory-files d))))))



(define (object-file f)
  (string-append
   (substring f 0 (- (string-length f) 4))
   object-extension))

(define (need-update? f)
  (let(
       (obj  (object-file f)))
  (or (not (file-exists? obj))
      (> (time->seconds (file-last-change-time f))
         (time->seconds (file-creation-time obj))))))

(define (delete-obj-then-compile f)
  (let(
       (obj (object-file f)))
    (if (file-exists? obj) (delete-file obj))
    (compile-file* f)))

(define (update-file f)
  (if (need-update? f)
      (delete-obj-then-compile f)))

(define (update-files-in-dir d)
  (for-each
   update-file
   (filter
    (notf header?)
    (filter scheme?
            (map (lambda (f) (string-append d "/" f))
                 (directory-files d))))))

(define (update-all d)
  (update-files-in-dir d)
  (for-each update-all
            (filter directory?
                    (map (lambda (f) (string-append d "/" f))
                         (directory-files d)))))
