
    with (Actors) with (ActorsTest) with (ActorsMatch) with (ActorsRemote) with (Yera) {

	onload = function () {

            ActorsRemote.init ();

	    var controlf = function () {
		recv(
		    hasType (Update, function (m){			
			send (domUpdater, m.value.domelement);
			if (m.value.choice) send (president, {choice: m.value.choice});
			controlf ();
		    }));
	    }
	    
            var init0 = function () {
		recv (
		    otherwise (function (m) {
			userevent.fire ({title: m.title});
			userevent.fire ({question: m.question});
			for (var j in m.result) {
			    userevent.fire ({choice: j});
			    userevent.fire ({newResult: {name: j, votes: m.result [j]}});
			}
			userevent.fire ({end_loading: true});
			init1 (m.title, m.question, m.result);
		    }));
	    }
	    
	    var init1 = function (title, question, result) {
		recv (
		    otherwise (function (m) {
			result [m.change] = m.votes;
			userevent.fire ({changeResult: {name: m.change, votes: m.votes}});
			init1(title, question, result);
		    }));
	    }
            var show = reactB ('Main.main');
            var domUpdater = idUpdater ('main');;
            var president = get ("/registry/poll");
 	    var control = actor (controlf);
	    var initializer = actor (init0);
	    
	    send (show, new Register (control, 'connect'));
	    
            send (president, {register: initializer});
	}

      frifri = function () {
	  userevent.fire ({end_loading: true});
	  frifri = function () {
              userevent.fire ({changeResult: {name: 'obama', votes: 90}});
	  }
      }
    }